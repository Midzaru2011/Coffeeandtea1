import jenkins.model.*
import java.util.logging.Logger

def plugins = [
    "ant",
    "antisamy-markup-formatter",
    "apache-httpcomponents-client-4-api",
    "asm-api",
    "authentication-tokens",
    "bootstrap5-api",
    "bouncycastle-api",
    "branch-api",
    "build-timeout",
    "caffeine-api",
    "checks-api",
    "cloudbees-folder",
    "commons-lang3-api",
    "commons-text-api",
    "config-file-provider",
    "credentials-binding",
    "credentials",
    "dark-theme",
    "display-url-api",
    "docker-commons",
    "docker-workflow",
    "durable-task",
    "echarts-api",
    "eddsa-api",
    "email-ext",
    "font-awesome-api",
    "git-client",
    "git",
    "github-api",
    "github-branch-source",
    "github",
    "gradle",
    "gson-api",
    "instance-identity",
    "ionicons-api",
    "jackson2-api",
    "jakarta-activation-api",
    "jakarta-mail-api",
    "javadoc",
    "javax-activation-api",
    "jaxb",
    "jjwt-api",
    "joda-time-api",
    "jquery3-api",
    "jsch",
    "json-api",
    "json-path-api",
    "jsoup",
    "junit",
    "ldap",
    "mailer",
    "matrix-auth",
    "matrix-project",
    "maven-plugin",
    "metrics",
    "mina-sshd-api-common",
    "mina-sshd-api-core",
    "multibranch-build-strategy-extension",
    "okhttp-api",
    "oss-symbols-api",
    "pam-auth",
    "pipeline-build-step",
    "pipeline-github-lib",
    "pipeline-graph-analysis",
    "pipeline-graph-view",
    "pipeline-groovy-lib",
    "pipeline-input-step",
    "pipeline-maven-api",
    "pipeline-maven",
    "pipeline-milestone-step",
    "pipeline-model-api",
    "pipeline-model-definition",
    "pipeline-model-extensions",
    "pipeline-stage-step",
    "pipeline-stage-tags-metadata",
    "plain-credentials",
    "plugin-util-api",
    "rebuild",
    "resource-disposer",
    "scm-api",
    "script-security",
    "snakeyaml-api",
    "ssh-credentials",
    "ssh-slaves",
    "structs",
    "theme-manager",
    "timestamper",
    "token-macro",
    "trilead-api",
    "variant",
    "workflow-aggregator",
    "workflow-api",
    "workflow-basic-steps",
    "workflow-cps",
    "workflow-durable-task-step",
    "workflow-job",
    "workflow-multibranch",
    "workflow-scm-step",
    "workflow-step-api",
    "workflow-support",
    "ws-cleanup"
]
def instance = Jenkins.getInstance()
def pm = instance.getPluginManager()
def uc = instance.getUpdateCenter()

plugins.each { pluginName ->
    if (!pm.getPlugin(pluginName)) {
        def plugin = uc.getPlugin(pluginName)
        if (plugin) {
            plugin.deploy()
        }
    }
}
instance.save()